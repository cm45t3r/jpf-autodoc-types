<?xml version="1.0" ?>

<!--
  build.xml - generic JPF extension build script
              using Ant (http://ant.apache.org/)
  public targets:
    
    compile           compile JPF and its specific (modeled) environment libraries
    test              run all JPF tests
    jar               build JPF jar files
    dist              build binary distribution
    clean             remove the files that have been generated by the build process
-->

<project name="jpf-autodoc-types" default="build" basedir=".">

  <!-- ========================== COMMON SECTION ========================== -->

  <!-- compiler settings -->
  <property name="src_level"     value="6"/>
  <property name="debug"         value="on"/>
  <property name="deprecation"   value="on"/>

  <uptodate property="build_uptodate" targetfile="build.properties" srcfile="build.properties"/>
  
  <!-- generic classpath settings -->
  <path id="lib.path">
    <pathelement location="build/main"/>
    <fileset dir=".">
      <include name="lib/*.jar"/>
    </fileset>
  </path>
    
  <!-- init: common initialization -->
  <target name="-init">
    <tstamp/>
    
    <mkdir dir="build"/>               <!-- the build root -->
    
    <!-- the things that have to be in the classpath of whatever runs Ant -->
    <available property="have_javac" classname="com.sun.tools.javac.Main"/>    
    
    <available file="src/main"        type="dir" property="have_main"/>
    <available file="src/annotations" type="dir" property="have_annotations"/>
    <available file="src/peers"       type="dir" property="have_peers"/>
    <available file="src/classes"     type="dir" property="have_classes"/>
    <available file="src/tests"       type="dir" property="have_tests"/>
    <available file="src/examples"    type="dir" property="have_examples"/>

    <!-- optionally set the required artifacts here
    <fail unless="have_main">no src/main</fail>
    <fail unless="have_annotations">no src/annotations</fail>
    <fail unless="have_peers">no src/peers</fail>
    <fail unless="have_classes">no src/classes</fail>
    <fail unless="have_tests">no src/tests</fail>
    <fail unless="have_examples">no src/examples</fail>
    -->

  </target>


  <!-- ======================= COMPILE SECTION ============================= -->
    
  <!-- public compile -->
  <target name="compile" depends="-init,-compile-annotations,-compile-main,-compile-peers,-compile-classes,-compile-tests,-compile-examples"
          description="compile all JPF core sources" >
  </target>
  
  <target name="-compile-annotations" if="have_annotations">
    <mkdir dir="build/annotations"/>
    <javac srcdir="src/annotations" destdir="build/annotations" includeantruntime="false"
           debug="${debug}" source="${src_level}" deprecation="${deprecation}" classpath=""/>
  </target>

  <target name="-compile-main" if="have_main">
    <mkdir dir="build/main"/>
    <javac srcdir="src/main" destdir="build/main" includeantruntime="false"
           debug="${debug}" source="${src_level}" deprecation="${deprecation}"
           classpathref="lib.path"/>

  </target>
  
  <target name="-compile-peers" if="have_peers" depends="-compile-main" >
    <mkdir dir="build/peers"/>
    <javac srcdir="src/peers" destdir="build/peers" includeantruntime="false"
           debug="${debug}" source="${src_level}" deprecation="${deprecation}"
           classpathref="lib.path"/>
  </target>
  
  <target name="-compile-classes" if="have_classes" depends="-compile-annotations,-compile-main" >
    <mkdir dir="build/classes"/>
    <javac srcdir="src/classes" destdir="build/classes" includeantruntime="false"
           debug="${debug}" source="${src_level}" deprecation="${deprecation}">
      <classpath>
        <path refid="lib.path"/>
        <pathelement location="build/annotations"/>
      </classpath>
    </javac>
  </target>
  
  <target name="-compile-tests" if="have_tests" depends="-compile-annotations,-compile-main">
    <mkdir dir="build/tests"/>
    <javac srcdir="src/tests" destdir="build/tests" includeantruntime="false"
           debug="${debug}" source="${src_level}" deprecation="${deprecation}"
           includes="*,gov/nasa/jpf/**">
      <classpath>
        <path refid="lib.path"/>
        <pathelement location="build/annotations"/>
      </classpath>       
    </javac>
  </target>

  <target name="-compile-examples" if="have_examples" depends="-compile-annotations,-compile-main">
    <mkdir dir="build/examples" />
    <javac srcdir="src/examples" destdir="build/examples" includeantruntime="false"
           debug="${debug}" source="${src_level}" deprecation="${deprecation}"
           classpathref="lib.path"/>
  </target>

  
  <!-- ======================= MISC SECTION ================================ -->
  
  <!-- build properties -->
  <property name="system.name" value="JPF autodoc types"/>
  <property name="system.vendor" value="FLA/NASA Ames Research Center"/>
  <property name="system.release" value="alpha"/>
  <property name="major.version" value="0.1"/>
  
  <!-- include all lib/*.jar for classpath -->
  <path id="lib.classpath">
    <fileset dir="lib/">
      <include name="*.jar"/>
    </fileset>
  </path>
  
  <!-- path convertion for manifest classpath -->
  <pathconvert property="lib.manifest" pathsep=" ">
    <path refid="lib.classpath"/>
    <chainedmapper>
      <flattenmapper/>
      <globmapper from="*" to="../lib/*"/>
    </chainedmapper>
  </pathconvert>
  
  <!-- build jars -->
  <target name="build" depends="compile,buildinfo"
        description="generate the JPF autodoc jar file">

    <jar jarfile="build/jpf-autodoc-types.jar">
      <fileset dir="build/main">
        <include name="gov/nasa/jpf/**"/>
      </fileset>
      
      <fileset dir="build/tests">
        <include name="gov/nasa/jpf/**"/>
      </fileset>
      
      <!-- optional include jpf packages jar -->
      <zipfileset includes="
              gov/nasa/jpf/*,
              gov/nasa/jpf/classfile/*,
              gov/nasa/jpf/jvm/*,
              gov/nasa/jpf/search/*,
              gov/nasa/jpf/util/*" 
              src="lib/jpf.jar"/>
      
      <manifest>
        <attribute name="Built-By" value="${user.name}"/>
        <attribute name="Implementation-Vendor" value="${system.vendor}"/>
        <attribute name="Implementation-Title" value="Automatic documentation of JPF types"/>
        <attribute name="Implementation-Version" value="${major.version}.${hg.tip.id}"/>
        <attribute name="Main-Class" value="gov.nasa.jpf.autodoc.types.AutoDocTool"/>
        <attribute name="Class-Path" value="${lib.manifest}"/>
      </manifest>
    </jar>
  </target>
  
  <!-- generate buildinfo file  -->
  <target name="buildinfo" description="create buildinfo properties">

    <!-- make this fail if there are uncommitted changes -->
    <!--<exec executable="hg" outputproperty="uncommitted_changes" failifexecutionfails="true">
      <arg value="status"/>
    </exec>
    <condition property="have_uncommitted_changes">
      <length string="${uncommitted_changes}" trim="true" when="greater" length="0"/>
    </condition>-->
    
    <exec executable="hg" outputproperty="hg.tip.id" failifexecutionfails="false">
      <arg value="tip"/>
      <arg value="--template"/>
      <arg value="{rev}\n"/>
    </exec>
    <exec executable="hg" outputproperty="hg.tip.changeset" failifexecutionfails="false">
      <arg value="tip"/>
      <arg value="--template"/>
      <arg value="{rev}:{node|short}\n"/>
    </exec>
    <exec executable="hg" outputproperty="hg.author" failifexecutionfails="false">
      <arg value="tip"/>
      <arg value="--template"/>
      <arg value="{author}\n"/>
    </exec>
    <exec executable="hg" outputproperty="hg.tip.date" failifexecutionfails="false">
      <arg value="tip"/>
      <arg value="--template"/>
      <arg value="{date|isodate}\n"/>
    </exec>
    <exec executable="hg" outputproperty="hg.paths.default" failifexecutionfails="false">
      <arg value="showconfig"/>
      <arg value="paths.default"/>
    </exec>

    <!-- it seems the 'propertyfile' task just appends -->
    <delete file="build.properties" failonerror="false"/>

    <propertyfile file="build.properties" comment="JPF autodoc types build info.">
      <entry key="revision" value="${hg.tip.changeset}"/>
      <entry key="date.tip" value="${hg.tip.date}"/>
      <entry key="author" value="${hg.author}"/>
      <entry key="app.name" value="${system.name}"/>
      <entry key="vendor" value="${system.vendor}"/>
      <entry key="version" value="${major.version}.${hg.tip.id}"/>
      <entry key="release" value="${system.release}"/>
      <entry key="upstream" value="${hg.paths.default}"/>
      <entry key="java.version" value="${java.version}"/>
      <entry key="os.arch" value="${os.arch}"/>
      <entry key="os.name" value="${os.name}"/>
      <entry key="os.version" value="${os.version}"/>
      <entry key="user.country" value="${user.country}"/>
    </propertyfile>
  </target>

  <!-- public clean: cleanup from previous tasks/builds -->
  <target name="clean"
          description="remove all build artifacts and temporary files">
    <delete dir="build" failonerror="false"/>
    <delete dir="tmp" failonerror="false"/>
    <delete>
      <fileset dir="." includes="**/*~" defaultexcludes="no" />
      <fileset dir="." includes="**/*.bak" defaultexcludes="no" />
      <fileset dir="." includes="**/error.xml" />
    </delete>
  </target>

  <target name="dist" description="build binary distribution">
    <delete file="build/${ant.project.name}.zip"/>
    <zip destfile="build/${ant.project.name}.zip" update="false" excludes="*">
      <zipfileset file="jpf.properties"  prefix="${ant.project.name}"/>
      <zipfileset dir="lib"  prefix="${ant.project.name}/lib"/>
      <zipfileset dir="bin"  prefix="${ant.project.name}/bin"/>
      <zipfileset dir="build" includes="*.jar" prefix="${ant.project.name}/build"/>
    </zip>
  </target>
  
  <!-- javadoc target: generate javadoc documentation -->
  <target name="javadoc" description="generate javadoc documentation">
    <delete dir="doc"/>
    <mkdir dir="doc"/>
    <javadoc packagenames="gov.nasa.jpf.autodoc.*"
             sourcepath="src/main"
             destdir="doc"
             version="true"
             use="true"
             windowtitle="JPF autodoc types">
      <doctitle><![CDATA[<h1>Java&#8482 PathFinder<br>Automated Documentation Tool</h1>]]>
      </doctitle>
      <bottom><![CDATA[<i>${system.vendor}, 2011.</i>]]></bottom>
      <group title="Packages" packages="gov.nasa.jpf.*"/>
    </javadoc>
  </target>

  <!-- ======================= TEST SECTION ================================ -->
  
  <target name="test" depends="build"
          description="run unit tests" if="have_tests">
    <condition property="junit.usefile">
      <!-- don't set if this is running from within an IDE that collects output -->
      <not>
        <isset property="netbeans.home"/>  
      </not>
    </condition>
    
    <junit printsummary="on" showoutput="off" haltonfailure="no" dir="${basedir}"
           fork="yes" forkmode="perTest" maxmemory="1024m" outputtoformatters="true">
      <formatter type="plain" usefile="${junit.usefile}"/>

      <assertions>
        <enable/>
      </assertions>

      <classpath>
        <path refid="lib.path"/>
        <pathelement location="build/tests"/>
      </classpath>

      <batchtest todir="build/tests">
        <fileset dir="build/tests">
          <exclude name="**/JPF_*.class"/>
          <include name="**/*Test.class"/>
        </fileset>
      </batchtest>
    </junit>
  </target>
</project>